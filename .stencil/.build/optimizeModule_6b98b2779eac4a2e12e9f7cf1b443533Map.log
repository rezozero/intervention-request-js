{"version":3,"names":["Strategy","constructor","options","this","ampersand","separator","webp","process","operations","format","align","fit","flip","crop","width","height","background","greyscale","blur","quality","progressive","interlace","sharpen","contrast","defaultMediaOptions","rule","name","baseUrl","Object","assign","window","interventionRequestJS","mergeConfigurations","computedOperations","computedFormat","operation","hasOwnProperty","push","join","formatPath","source","undefined","basePath","path","replace","configurations","mediaOptions","strategies","strategyOverride","defaultStrategy","cloudinaryStrategy","noprocessStrategy","strategiesList","default","cloudinary","noprocess"],"sources":["src/utils/strategy.ts","src/strategies/default.ts","src/strategies/cloudinary.ts","src/strategies/noprocess.ts","src/strategies/index.ts"],"sourcesContent":["/**\n * Strategy\n * @description Build providers default strategy\n * @author ravorona\n */\nimport {\n    InterventionRequestStrategyOperations,\n    InterventionRequestStrategy,\n    InterventionRequestStrategyFormat\n} from '../strategies'\nimport { InterventionRequestConfigurations } from \"../intervention-request\"\n\nexport default class Strategy implements InterventionRequestStrategy {\n    /**\n     * Strategy defaults\n     */\n    public name: string\n    public baseUrl: string\n    public ampersand: string = '-'\n    public separator: string = ''\n    public webp: boolean = false\n    public process: boolean = true\n    public operations: InterventionRequestStrategyFormat = {\n        format: {\n            align: 'a',\n            fit: 'f',\n            flip: 'm',\n            crop: 'c',\n            width: 'w',\n            height: 'h',\n            background: 'b',\n            greyscale: 'g',\n            blur: 'l',\n            quality: 'q',\n            progressive: 'p',\n            interlace: 'i',\n            sharpen: 's',\n            contrast: 'k'\n        }\n    }\n\n    /**\n     * Default media options\n     * @return InterventionRequestOperations\n     */\n    private defaultMediaOptions: InterventionRequestStrategyFormat = {\n        rule: '100vw',\n        format: {}\n    }\n\n    /**\n     * Constructor\n     * @param options\n     */\n    constructor(options: InterventionRequestStrategy) {\n        this.name = options.name\n        this.baseUrl = options.baseUrl\n        this.ampersand = options.ampersand || this.ampersand\n        this.separator = options.separator || this.separator\n        this.webp = options.webp || this.webp\n        this.operations = {...this.operations, ...options.operations}\n\n        if ('process' in options) {\n            this.process = options.process\n        }\n\n        /**\n         * Apply override\n         * from global variable\n         */\n        if (typeof window !== 'undefined' && window.interventionRequestJS) {\n            this.mergeConfigurations(window.interventionRequestJS)\n        }\n    }\n\n    /**\n     * Compute operations\n     * @param format - image format\n     * @return string\n     */\n    private computedOperations(format: InterventionRequestStrategyOperations): string {\n        let computedOperations = []\n\n        /**\n         * Applying default media options\n         */\n        let computedFormat = {\n            ...this.defaultMediaOptions.format,\n            ...format\n        }\n\n        /**\n         * Loop thru operations\n         */\n        for (let operation in computedFormat) {\n            if (computedFormat.hasOwnProperty(operation) && this.operations.format[operation]) {\n                computedOperations.push(`${this.operations.format[operation]}${this.separator}${computedFormat[operation]}`)\n            }\n        }\n\n        return computedOperations.join(this.ampersand)\n    }\n\n    /**\n     * Format path\n     * @param source - filename\n     * @param operations - image format\n     * @param baseUrl - strategy baseUrl override\n     * @param rule - media rule\n     * @return string\n     */\n    public formatPath(source: string, operations: InterventionRequestStrategyFormat, baseUrl: string | undefined = undefined, rule: boolean = false): string {\n        let basePath = baseUrl || this.baseUrl\n        let path = source\n\n        if (this.process) {\n            path = `${this.computedOperations(operations.format)}/${path}`\n        }\n\n        if (basePath) {\n            basePath = basePath.replace(/\\+$/, '')\n            path = `${basePath}/${path}`\n        }\n\n        if (rule && operations.rule) {\n            path += ` ${operations.rule}`\n        }\n\n        return path\n    }\n\n    /**\n     * Merge configurations\n     * @param configurations - InterventionRequestConfigurations\n     */\n    public mergeConfigurations(configurations: InterventionRequestConfigurations) {\n        /**\n         * Override default media options\n         */\n        if (configurations.mediaOptions) {\n            this.defaultMediaOptions.format = {\n                ...this.defaultMediaOptions.format,\n                ...configurations.mediaOptions\n            }\n        }\n\n        /**\n         * Override strategy configuration\n         */\n        if (configurations.strategies && configurations.strategies[this.name]) {\n            const strategyOverride = configurations.strategies[this.name]\n\n            this.baseUrl = strategyOverride.baseUrl || this.baseUrl\n            this.ampersand = strategyOverride.ampersand || this.ampersand\n            this.separator = strategyOverride.separator || this.separator\n            this.webp = strategyOverride.webp || this.webp\n            this.operations = {...this.operations, ...strategyOverride.operations}\n        }\n    }\n}\n","/**\n * Default strategy\n * @description Intervention request default strategy configuration\n * @author ravorona\n */\nimport { InterventionRequestStrategy } from '../strategies'\n\nconst defaultStrategy: InterventionRequestStrategy = {\n    name: 'default',\n    baseUrl: '/assets',\n    ampersand: '-',\n    webp: true\n}\n\nexport default defaultStrategy\n","/**\n * Cloudinary strategy\n * @description Cloudinary strategy default configuration\n * @author ravorona\n */\nimport { InterventionRequestStrategy } from '../strategies'\n\nconst cloudinaryStrategy: InterventionRequestStrategy = {\n    name: 'cloudinary',\n    baseUrl: 'https://res.cloudinary.com/demo/image/upload',\n    ampersand: ',',\n    separator: '_',\n    webp: false\n}\n\nexport default cloudinaryStrategy\n","/**\n * No process strategy\n * @description Intervention request noprocess strategy configuration\n * @author ravorona\n */\nimport { InterventionRequestStrategy } from '../strategies'\n\nconst noprocessStrategy: InterventionRequestStrategy = {\n    name: 'noprocess',\n    process: false\n}\n\nexport default noprocessStrategy\n","import defaultStrategy from '../strategies/default'\nimport cloudinaryStrategy from '../strategies/cloudinary'\nimport noprocessStrategy from '../strategies/noprocess'\nimport Strategy from '../utils/strategy'\nimport { InterventionRequestStrategies } from '../strategies'\n\n/**\n * Strategy list\n * @description Available strategy wrapper\n * @author ravorona\n */\nconst strategiesList: InterventionRequestStrategies = {\n    default: new Strategy(defaultStrategy),\n    cloudinary: new Strategy(cloudinaryStrategy),\n    noprocess: new Strategy(noprocessStrategy)\n}\n\nexport default strategiesList"],"mappings":"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"}